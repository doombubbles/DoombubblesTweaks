function ShouldPactBladeOverride(entity)
  local weapon = entity or context.Source
  local owner = GetOwner(weapon)
  if HasWeaponProperty(WeaponProperties.Finesse, weapon).Result or WieldingFinesseWeapon(owner).Result then
    -- Seems like just the HasWeaponProperty doesn't seem to work
    return ConditionResult(owner.Charisma > owner.Dexterity) & ConditionResult(owner.Charisma > owner.Strength)
  else
    return ConditionResult(owner.Charisma > owner.Strength)
  end
end

function MagicMissileSpellCheck()
  return SpellId('Projectile_MAG_MagicMissile_Shot')
  | SpellId('Projectile_UND_MagicMissile_SocietyOfBrilliance_Amulet') 
  | SpellId('Projectile_MagicMissile')
  | IsSpellChildOrVariantFromContext('Projectile_MagicMissile')
  | SpellId('Projectile_MagicMissile_Cantrip')
end

function GuidingBoltCheck()
  return SpellId('Projectile_GuidingBolt')
  | SpellId('Projectile_MAG_GuidingBolt_MonkGloves')
  | IsSpellChildOrVariantFromContext('Projectile_GuidingBolt')
end 

function EldritchBlastCheck()
  return SpellId('Projectile_EldritchBlast')
  | SpellId('Projectile_MAG_EldritchBlast_Staff')
  | IsSpellChildOrVariantFromContext('Projectile_EldritchBlast')
  | SpellId('Projectile_FireRay_Warlock')
  | (SpellDamageTypeIs(DamageType.Fire) & HasPassive('ThirstingBlade_Check',context.Source))
end

function FlySpellCheck()
  return SpellId('Projectile_Fly') 
  | SpellId('Projectile_Fly_Spell')
  | SpellId('Projectile_TAD_Levitate')
end

function AttackingWithPiercingWeapon(entity)
  entity = entity or context.Target
  local weapon = GetAttackWeapon(entity)
  
  if HasWeaponProperty(WeaponProperties.Ammunition, weapon).Result then
    return ConditionResult(true)
  end

  local piercingWeapons = {
    'Daggers',
    'Javelins',
    'Spears',
    'Morningstars',
    'Rapiers',
    'Shortswords',
    'WarPicks',
    'Tridents',
    'Pikes'
  }
  
  for i,group in ipairs(piercingWeapons) do
    if IsOfProficiencyGroup(group, weapon).Result then
      return ConditionResult(true)
    end
  end

  return ConditionResult(false)
end

function BonusToSpellDC(entity)
  local entity = entity or context.Source
  local baseAmount = 8 + entity.ProficiencyBonus + GetModifier(entity.Strength)

  local dc = SourceSpellDC(baseAmount, entity, Ability.Strength)

  return math.max(0, dc - baseAmount)
end

function HeightenedConjurationSpellCheck()
  return (HasStringInSpellRoll('SavingThrow') | HasStringInFunctorConditions('SavingThrow') | HasStringInSpellRoll('SpellAutoResolveOnAlly')) &
  (HasSpellFlag(SpellFlags.Spell) & IsSpellOfSchool(SpellSchool.Conjuration))
end

function HotStreakSpellCheck()
  return QuickenedSpellCheck() & SpellDamageTypeIs(DamageType.Fire)
end

function SplittingIceProjectileSpellCheck()
  return ~NumberOfTargetsGreaterThan(1) & ~AreaRadiusGreaterThan(0) & HasSpellFlag(SpellFlags.Spell) & SpellTypeIs(SpellType.Projectile) & SpellDamageTypeIs(DamageType.Cold)
end

function SplittingIceTargetSpellCheck()
  return TargetRadiusGreaterThan(1.5) & ~AreaRadiusGreaterThan(0) & HasSpellFlag(SpellFlags.Spell) & SpellTypeIs(SpellType.Target) & ~HasFunctor(StatsFunctorType.Summon) & SpellDamageTypeIs(DamageType.Cold) & ~NumberOfTargetsGreaterThan(1)
end

function SplittingIceTargetTouchSpellCheck()
  return TargetRadiusGreaterThan(0) & ~TargetRadiusGreaterThan(1.5) & ~AreaRadiusGreaterThan(0) & HasSpellFlag(SpellFlags.Spell) & SpellTypeIs(SpellType.Target) & ~HasFunctor(StatsFunctorType.Summon) & SpellDamageTypeIs(DamageType.Cold) & ~NumberOfTargetsGreaterThan(1)
end

function FingersOfFrostSpellCheck()
  return SpellDamageTypeIs(DamageType.Cold) & (HasStringInSpellRoll('AttackType.RangedSpellAttack') | HasStringInSpellRoll('AttackType.MeleeSpellAttack')) & HasEnoughIciclesCheck(context.Source)
end

function HasEnoughIciclesCheck(entity)
  local entity = entity or context.Target
  return ConditionResult(GetStatusDuration('ICICLES', entity) >= 4)
end

function ClearCastingSpellCheck()
  return IsSpell() & (HasUseCosts('SpellSlot') | HasUseCosts('WarlockSpellSlot'))
end

function ClearCastingMMSpellCheck()
  return IsSpell() & (HasUseCosts('SpellSlot') | HasUseCosts('WarlockSpellSlot')) & MagicMissileSpellCheck()
end

function HasNoMainHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', false, false, entity)
  return ConditionResult(result.Result, {ConditionError("HasWeaponInMainHand")}, {ConditionError("HasNotWeaponInMainHand")})
end

function HasNoOffHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', true, false, entity) & ~HasShieldEquipped(entity) & ~WieldingWeapon('Twohanded', false, false, entity)
  return ConditionResult(result.Result, {ConditionError("HasWeaponInOffHand")}, {ConditionError("HasNotWeaponInOffHand")})
end