---@diagnostic disable: undefined-global

function ShouldPactBladeOverride(entity)
  local weapon = entity or context.Source
  local owner = GetOwner(weapon)
  if HasWeaponProperty(WeaponProperties.Finesse, weapon).Result or WieldingFinesseWeapon(owner).Result then
    -- Seems like just the HasWeaponProperty doesn't seem to work
    return ConditionResult(owner.Charisma > owner.Dexterity) & ConditionResult(owner.Charisma > owner.Strength)
  else
    return ConditionResult(owner.Charisma > owner.Strength)
  end
end

function ShouldWeaponBondOverride(entity)
  local weapon = entity or context.Source
  local owner = GetOwner(weapon)
  if HasWeaponProperty(WeaponProperties.Finesse, weapon).Result or WieldingFinesseWeapon(owner).Result then
    -- Seems like just the HasWeaponProperty doesn't seem to work
    return ConditionResult(owner.Intelligence > owner.Dexterity) & ConditionResult(owner.Intelligence > owner.Strength)
  else
    return ConditionResult(owner.Intelligence > owner.Strength)
  end
end

function GuidingBoltCheck()
  return SpellId('Projectile_GuidingBolt')
      | SpellId('Projectile_MAG_GuidingBolt_MonkGloves')
      | IsSpellChildOrVariantFromContext('Projectile_GuidingBolt')
end

function EldritchBlastCheck()
  return SpellId('Projectile_EldritchBlast')
      | SpellId('Projectile_MAG_EldritchBlast_Staff')
      | IsSpellChildOrVariantFromContext('Projectile_EldritchBlast')
      | SpellId('Projectile_FireRay_Warlock')
      |
      (IsSpell() & SpellDamageTypeIs(DamageType.Fire) & HasPassive('PactOfDestruction', context.Source) & HasPassive('ThirstingBlade_Check', context.Source))
end

function FlySpellCheck()
  return SpellId('Projectile_Fly') | SpellId('Projectile_Fly_Spell') | SpellId('Projectile_TAD_Levitate')
end

function AttackingWithPiercingWeapon(entity)
  entity = entity or context.Target
  local weapon = GetAttackWeapon(entity)

  if HasWeaponProperty(WeaponProperties.Ammunition, weapon).Result then
    return ConditionResult(true)
  end

  local piercingWeapons = {
    'Daggers',
    'Javelins',
    'Spears',
    'Morningstars',
    'Rapiers',
    'Shortswords',
    'WarPicks',
    'Tridents',
    'Pikes'
  }

  for i, group in ipairs(piercingWeapons) do
    if IsOfProficiencyGroup(group, weapon).Result then
      return ConditionResult(true)
    end
  end

  return ConditionResult(false)
end

function BonusToSpellDC(entity)
  local entity = entity or context.Source
  local baseAmount = 8 + entity.ProficiencyBonus + GetModifier(entity.Strength)

  local dc = SourceSpellDC(baseAmount, entity, Ability.Strength)

  return math.max(0, dc - baseAmount)
end

function HeightenedConjurationSpellCheck()
  return (HasStringInSpellRoll('SavingThrow') | HasStringInFunctorConditions('SavingThrow') | HasStringInSpellRoll('SpellAutoResolveOnAlly')) &
      (HasSpellFlag(SpellFlags.Spell) & IsSpellOfSchool(SpellSchool.Conjuration))
end

function HotStreakSpellCheck()
  return QuickenedSpellCheck() & SpellDamageTypeIs(DamageType.Fire)
end

function SplittingIceProjectileSpellCheck()
  return ~NumberOfTargetsGreaterThan(1) & ~AreaRadiusGreaterThan(0) & HasSpellFlag(SpellFlags.Spell) &
      SpellTypeIs(SpellType.Projectile) & SpellDamageTypeIs(DamageType.Cold)
end

function SplittingIceTargetSpellCheck()
  return TargetRadiusGreaterThan(1.5) & ~AreaRadiusGreaterThan(0) & HasSpellFlag(SpellFlags.Spell) &
      SpellTypeIs(SpellType.Target) & ~HasFunctor(StatsFunctorType.Summon) & SpellDamageTypeIs(DamageType.Cold) &
      ~NumberOfTargetsGreaterThan(1)
end

function SplittingIceTargetTouchSpellCheck()
  return TargetRadiusGreaterThan(0) & ~TargetRadiusGreaterThan(1.5) & ~AreaRadiusGreaterThan(0) &
      HasSpellFlag(SpellFlags.Spell) & SpellTypeIs(SpellType.Target) & ~HasFunctor(StatsFunctorType.Summon) &
      SpellDamageTypeIs(DamageType.Cold) & ~NumberOfTargetsGreaterThan(1)
end

function FingersOfFrostSpellCheck()
  return SpellDamageTypeIs(DamageType.Cold) &
      (HasStringInSpellRoll('AttackType.RangedSpellAttack') | HasStringInSpellRoll('AttackType.MeleeSpellAttack')) &
      HasEnoughIciclesCheck(context.Source)
end

function HasEnoughIciclesCheck(entity)
  local entity = entity or context.Target
  return ConditionResult(GetStatusDuration('ICICLES', entity) >= 4)
end

function ClearCastingSpellCheck()
  return IsSpell() & (HasUseCosts('SpellSlot') | HasUseCosts('WarlockSpellSlot'))
end

function HasNoMainHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', false, false, entity)
  return ConditionResult(result.Result, { ConditionError("HasWeaponInMainHand") },
    { ConditionError("HasNotWeaponInMainHand") })
end

function HasNoOffHand(entity)
  entity = entity or context.Source
  result = ~WieldingWeapon('Melee', true, false, entity) & ~HasShieldEquipped(entity) &
      ~(WieldingWeapon('Twohanded', false, false, entity) & WieldingWeapon('Melee', false, false, entity))
  return ConditionResult(result.Result, { ConditionError("HasWeaponInOffHand") },
    { ConditionError("HasNotWeaponInOffHand") })
end

function IEC(passive)
  return ~IsWeaponAttack() & ~IsUnarmedAttack() &
      (HasUseCosts('KiPoint') | SpellId('Projectile_RayOfFrost_Monk') | SpellId('Target_ShockingGrasp_Monk')) &
      HasPassive(passive, context.Source)
end

function BM(passive)
  return HasNoMainHand() & IsCantrip() & SpellAttackCheck() & HasPassive(passive, context.Source)
end

function IsUnarmedWildshape()
  return (HasStatus('SG_Polymorph_BeastShape', context.Source) | HasStatus('SLAYER_PLAYER', context.Source) | HasStatus('SLAYER_PLAYER_10', context.Source)) &
      ~(Tagged('MYRMIDON_AIR', context.Source) | Tagged('MYRMIDON_FIRE', context.Source) | Tagged('MYRMIDON_WATER', context.Source))
end

function DivinePurposeSpellCheck()
  return SpellId('Target_TemplarsVerdict') | SpellId('Shout_DivineStorm')
end

function KillingMachineSpellCheck()
  return SpellId('Target_Obliterate') | SpellId('Target_Obliterate_DW') | SpellId('Zone_Frostscythe')
end

function DeathGripCheck()
  local result = Dead() | Item() | Ally()
  if not result.Result then
    local st = ~SavingThrow(Ability.Strength, context.Source.Strength)
    return ConditionResult(st.Result, {}, {}, st.Chance)
  end

  return result
end

function DistanceToTargetLessOrEqual(value)
  local errorTrue = { ConditionError("DistanceGreaterOrEqualThan_False",
    { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  local errorFalse = { ConditionError("DistanceGreaterOrEqualThan_True",
    { ConditionErrorData.MakeFromNumber(value, EErrorDataType.Distance) }) }
  return ConditionResult(DistanceToTarget() <= value, errorFalse, errorTrue)
end

function HasRuneWeapon()
  local entity = entity or context.Source
  local weaponEntity = GetActiveWeapon(entity, true)
  if weaponEntity.IsValid then
    local result = Character(entity) &
        (HasAnyStatus({ 'RUNE_RAZORICE', 'RUNE_FALLEN_CRUSADER', 'RUNE_STONESKIN_GARGOYLE' }, {}, {}, weaponEntity))
    return ConditionResult(result.Result, { ConditionError("HasNotRuneWeapon") }, { ConditionError("HasRuneWeapon") })
  end
  return ConditionResult(false, { ConditionError("HasNotRuneWeapon") }, { ConditionError("HasRuneWeapon") })
end

function RuneSpellCheck()
  return (
    HasUseCosts('BloodRune') | HasUseCosts('FrostRune') | HasUseCosts('UnholyRune') | HasUseCosts('AnyRune') | HasUseCosts('BloodOrFrostRune') | HasUseCosts('BloodOrUnholyRune') | HasUseCosts('FrostOrUnholyRune') |
    SpellId('Target_VampiricTouch_Free_DK') | SpellId('Target_Eyebite_Asleep_Free_DK') | SpellId('Target_Eyebite_Panicked_Free_DK') | SpellId('Target_Eyebite_Sickened_Free_DK') |
    SpellId('Target_FrostStrike') | SpellId('Target_Obliterate_DW')  | SpellId('Target_Obliterate') |
    SpellId('Target_DeathStrike')  | SpellId('Target_Marrowrend') | SpellId('Target_HeartStrike') |
    SpellId('Target_ScourgeStrike')  | SpellId('Target_FesteringStrike')
  )
end

function CarnageSpellCheck()
  return HasUseCosts('ActionPoint') & RuneSpellCheck() & ~ExtraAttackSpellCheck()
end

function IsKillingBlowish()
  return ~HasStatus('WILDSHAPE_TECHNICAL', context.Target) & HasHPLessThan(1)
end

function IsDamageTypeUnarmed()
  return ConditionResult(context.HitDescription.GetDamageDoneForType(DamageType.Bludgeoning) > 0)
end

function HeavyWeaponMasterMelee(entity)
  local entity = entity or context.Source
  local weapon = GetActiveWeapon(entity, true)

  local isHeavy = HasWeaponProperty(WeaponProperties.Heavy, weapon)
  local isMelee = HasWeaponProperty(WeaponProperties.Melee, weapon)

  local res = IsProficientWith(entity, weapon) & isMelee & isHeavy

  return ConditionResult(res.Result, { ConditionError("HasNotHeavyWeapon") }, { ConditionError("HasHeavyWeapon") })
end

function HeavyWeaponMasterRanged(entity, allowBows)
  entity = entity or context.Source
  allowBows = allowBows or false
  local weapon = GetActiveWeapon(entity, true)

  local isHeavy = HasWeaponProperty(WeaponProperties.Heavy, weapon)
  local isMelee = HasWeaponProperty(WeaponProperties.Melee, weapon)
  local isLoading = HasWeaponProperty(WeaponProperties.Loading, weapon)

  local res = IsProficientWith(entity, weapon) & ~isMelee & isHeavy

  return ConditionResult(res.Result and (isLoading.Result or allowBows), { ConditionError("HasNotHeavyWeapon") }, { ConditionError("HasHeavyWeapon") })
end

function IsEldritchSmite()
  return SpellId('Target_Smite_Eldritch') | SpellId('Target_Smite_Eldritch_2') | SpellId('Target_Smite_Eldritch_3') |
  SpellId('Target_Smite_Eldritch_4') | SpellId('Target_Smite_Eldritch_5') | SpellId('Target_Smite_Eldritch_6')
end
